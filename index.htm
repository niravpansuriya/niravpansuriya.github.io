<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
  <title>A Parallel Jacobi Gauss-Seidel Method with Dynamic Parallelization</title>






  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" alink="#000000" link="#000000" vlink="#000000">
  <table border="0" width="100%">

    <tbody>
      <tr>
        <td height="27" width="45%">
          <h2>COMP 5704: Parallel Algorithms and Applications in Data Science<br>
          </h2>
        </td>
        <td height="27" width="10%">
          <p><br>
          </p>
        </td>
        <td height="27" width="45%">
          <p><b>School of Computer Science</b><br>
            <b>Carleton University, Ottawa, Canada</b>
          </p>
        </td>
      </tr>
    </tbody>
  </table>

  <hr noshade="noshade">
  <h2>
    <font color="#005128">Project Title: </font>
    <font>
      <font color="#005128">A Parallel Jacobi Gauss-Seidel Method with Dynamic Parallelization</font>
    </font>
  </h2>

  <h2>
    <font>
      <font color="#005128">Name: Nirav C. Pansuriya</font>
    </font>
  </h2>

  <h2>
    <font>
      <font color="#005128">E-Mail: niravchhaganbhaipan@cmail.carleton.ca</font>
    </font>
  </h2>



  <hr noshade="noshade">
  <b>
    <font color="#005128">Project Outline:</font>
  </b>Computer architecture has become increasingly parallel in recent years. Modern GPUs, such as the NVIDIA GForce GTX
  280 provide enormous parallelism. So, the focus of researchers has moved to parallelism rather than continuous
  improvements to the single unit speed of computation. We regularly encounter several linear systems in physics,
  mathematics, and engineering. In many scientific simulations, we have to solve large-scale linear equations. However,
  large-scale linear equations require a significant amount of time and resources, such as memory. It is always a
  trending topic among researchers to find an algorithm that can solve large-scale linear equations in less time and
  with fewer resources. The Jacobi and Gauss-Seidel methods are two famous and well-known iterative methods for solving
  systems of linear equations. Although the Jacobi approach is extremely simple to implement in a parallel environment,
  it requires an excessive number of iterations to solve a large system of linear equations. The Gauss-Seidel method is
  an improved version of the Jacobi method. The GS method is capable of solving a large system of linear equations in a
  small number of iterations. However, because this method is sequential in nature, it is extremely difficult to
  implement in a parallel environment. One method is easily implemented in a parallel environment but requires an
  excessive number of iterations to solve, whereas the other method can solve a large system of linear equations in a
  very few iterations but cannot be implemented in a parallel environment. To address this issue, the author of the base
  paper used for this research work introduced the PJG (Parallel Jacobian Gauss-Seidel Method). This method is capable
  of solving large systems of linear equations in a small number of iterations and is extremely simple to apply in a
  parallel environment too. The primary objective of this research is to further enhance the performance of the PJG
  method by implementing the concept of dynamic parallelization. Another aim is to compare the proposed method (PJG
  method with dynamic parallelization) with the Jacobi method, the GS method, and the PJG method. I aim to implement all
  of these algorithms in CUDA and executeÂ them on a GPU in order to compare their performance with the proposed
  technique.
  <p><b>
      <font color="#005128">Startup Paper(s):</font>
    </b> A Parallel Jacobi-Embedded
    Gauss-Seidel Method <a
      href="https://niravpansuriya.github.io/A_Parallel_Jacobi-Embedded_Gauss-Seidel_Method.pdf">[PDF]</a></p>

  <p><b>
      <font color="#005128">Deliverables:</font>
    </b></p>

  <ul>

    <li>
      <div align="left"><a href="https://niravpansuriya.github.io/Literature_Review.pdf">
          <font color="#000000">Literature Review</font>
        </a> (PDF file created from
        LATEX template)</div>
    </li>
    <li>
      <div align="left"><a href="Presentation_Outline.pdf">
          <font color="#000000">Presentation Outline</font>
        </a> (PDF file created from
        LATEX template)</div>
    </li>
    <li>
      <div align="left"> <a href="Slide_Presentation.pptx">
          <font color="#000000">Slide Presentation</font>
        </a> (PowerPoint File) incl.
        Question Sheet </div>
    </li>
    <li>
      <div align="left"><a href="Final_Paper.pdf">
          <font color="#000000">Final
            Paper</font>
        </a> (PDF file created from LATEX template)</div>
    </li>
    <li><a href="https://github.com/niravpansuriya/niravpansuriya.github.io/blob/main/Code_and_Data/parallel_algo.cu">
        <font color="#000000">Code and Data</font>
      </a>
    </li>
  </ul>

  <p><b>
      <font color="#005128">Relevant References:</font>
    </b></p>

  <ul>

    <li><a href="https://ieeexplore.ieee.org/document/9325945" target="_blank">A Parallel Jacobi-Embedded Gauss-Seidel
        Method</li>
    <li><a href="https://books.google.ca/books?id=yojoCAAAQBAJ" target="_blank">Handbook of Mathematics</li>
    <li><a href="https://books.google.ca/books?id=MjJSGuXAQWwC" target="_blank">Applied Iterative Methods</li>
    <li><a href="https://ieeexplore.ieee.org/document/7396262" target="_blank">Study on the Convergence of Solving
        Linear Equations by Gauss-Seidel and Jacobi Method</li>
    <li><a href="https://ieeexplore.ieee.org/document/5166987" target="_blank">Parallel Dense Gauss-Seidel Algorithm on
        Many-Core Processors</li>
    <li><a href="https://link.springer.com/book/10.1007/b98885" target="_blank">Numerical Mathematics</li>
    <li><a href="https://books.google.ca/books?id=FOTMBQAAQBAJ" target="_blank">Applied Iterative Methods</li>
    <li><a
        href="https://www.springerprofessional.de/en/parallel-smoother-based-on-block-red-black-ordering-for-multigri/4115132"
        target="_blank">Parallel Smoother Based on Block Red-Black Ordering for Multigrid Poisson Solver</li>
  </ul>

</body>

</html>